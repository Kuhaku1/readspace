# Generated by Django 2.1.7 on 2019-05-01 04:04

import ckeditor.fields
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.manager
import mainsite.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Author',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='名字')),
                ('profiles', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='简介')),
            ],
            options={
                'verbose_name': '作者',
                'verbose_name_plural': '作者',
                'db_table': 'Author',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=100, unique=True, verbose_name='名称')),
                ('state', models.CharField(choices=[('0', '已完结'), ('1', '连载中'), ('2', '停更'), ('3', '未知')], default='3', max_length=1, verbose_name='状态')),
                ('image', models.ImageField(default='book/defaultpicture.png', upload_to=mainsite.models.get_from_book_save_image_path)),
                ('profiles', ckeditor.fields.RichTextField(verbose_name='简介')),
                ('publicatioDay', models.DateField(verbose_name='出版日')),
                ('lastUpdated', models.DateTimeField(blank=True, null=True, verbose_name='最后更新日')),
                ('is_Delete', models.BooleanField(default=False, verbose_name='是否删除')),
            ],
            options={
                'verbose_name': '书籍',
                'verbose_name_plural': '书籍',
                'db_table': 'Book',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='BookRanking',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('popularity', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='人气')),
                ('scoreValue', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='评分值')),
                ('scoreNumber', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='评分数')),
                ('collection', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='收藏')),
                ('viewingnumber', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='观看数')),
                ('likenumber', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='点赞数')),
                ('coinnumber', models.PositiveIntegerField(blank=True, default=0, null=True, verbose_name='投币数')),
                ('book', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='mainsite.Book', verbose_name='书名')),
            ],
            options={
                'verbose_name': '图书排行',
                'verbose_name_plural': '图书排行',
                'db_table': 'BookRanking',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Family',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(choices=[('01', '热血'), ('02', '奇幻'), ('03', '冒险'), ('04', '战斗'), ('05', '穿越'), ('06', '日常'), ('07', '科幻'), ('08', '治愈'), ('09', '校园'), ('10', '恋爱'), ('11', '后宫'), ('12', '猎奇'), ('13', '魔法'), ('14', '历史'), ('15', '致郁'), ('16', '推理'), ('17', '智斗'), ('18', '装逼'), ('19', '职场'), ('20', '搞笑')], max_length=4, verbose_name='类别')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainsite.Book', verbose_name='书名')),
            ],
            options={
                'verbose_name': '书籍类别',
                'verbose_name_plural': '书籍类别',
                'db_table': 'Family',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Press',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=40, null=True, unique=True, verbose_name='名称')),
                ('address', models.CharField(blank=True, max_length=100, null=True, verbose_name='地址')),
                ('profiles', ckeditor.fields.RichTextField(blank=True, null=True, verbose_name='简介')),
                ('is_Delete', models.BooleanField(default=False, verbose_name='是否删除')),
            ],
            options={
                'verbose_name': '出版社',
                'verbose_name_plural': '出版社',
                'db_table': 'Press',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='Subsection',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('bookNumber', models.PositiveSmallIntegerField(verbose_name='卷号')),
                ('name', models.CharField(max_length=100, verbose_name='名称')),
                ('updateDay', models.DateTimeField(verbose_name='更新日期')),
                ('image', models.ImageField(default='book/defaultpicture.png', upload_to=mainsite.models.get_from_subsection_save_image_path, verbose_name='图片')),
                ('profiles', ckeditor.fields.RichTextField(verbose_name='简介')),
                ('price', models.DecimalField(decimal_places=2, default=0.0, max_digits=6, verbose_name='价格')),
                ('discount', models.DecimalField(blank=True, decimal_places=1, max_digits=2, null=True, verbose_name='优惠')),
                ('physicalFileAddress', models.FileField(upload_to=mainsite.models.get_from_subsection_save_address_path, verbose_name='物理地址')),
                ('is_Delete', models.BooleanField(default=False, verbose_name='是否删除')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='mainsite.Book', verbose_name='所属书名')),
            ],
            options={
                'verbose_name': '分卷',
                'verbose_name_plural': '分卷',
                'db_table': 'Subsection',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.CreateModel(
            name='ThisLightNovelIsTerrific',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('years', models.CharField(choices=[('1', '2005'), ('2', '2006'), ('3', '2007'), ('4', '2008'), ('5', '2009'), ('6', '2010'), ('7', '2011'), ('8', '2012'), ('9', '2013'), ('10', '2014'), ('11', '2015'), ('12', '2016'), ('13', '2017'), ('14', '2018'), ('15', '2019'), ('16', '2020')], max_length=3, verbose_name='年份')),
                ('ranking', models.PositiveSmallIntegerField(verbose_name='排名')),
                ('book', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mainsite.Book', verbose_name='书名')),
            ],
            options={
                'verbose_name': '这本轻小说真厉害',
                'verbose_name_plural': '这本轻小说真厉害',
                'db_table': 'LightNovelRanking',
            },
            managers=[
                ('object', django.db.models.manager.Manager()),
            ],
        ),
        migrations.AddField(
            model_name='book',
            name='publishers',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='mainsite.Press', verbose_name='出版社'),
        ),
        migrations.AddField(
            model_name='author',
            name='book',
            field=models.ManyToManyField(blank=True, to='mainsite.Book', verbose_name='书名'),
        ),
    ]
